def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    else:
        gcd, x1, y1 = extended_gcd(b, a % b)
        x = y1
        y = x1 - (a // b) * y1
        return gcd, x, y

e1 = 17
e2 = 65537
n = 80430266599687451271372798650377726706899274333867767108714211955110891574116735090547988007171574475993474011747457265853992008700654150273161240032997208894116265240901238065873875740499593115347337403208326248595400046200770920352469385567077830975421142446347858711982728428028010249647540403219851373997
c1 = 48481733123685370408328471566661825457812508924232195019314044639807134027214458264786276908169000157483508854456067869248758018283768333805294005774117952883501446987238153951087727232441738561829557321962885047412792861625823301280422696268964560263960475185580578090018453925240606195403662531046701179128
c2 = 57129932279173694578026588626654860449884532219436010316451228098897786808223598000480140037558578469870381081195461335485133454105652055532071179686730306649504331740507535053484647257030567077927287908195624645385648484114792795909702386826322923320542394580285257544907456723679519086751119440781209409049

gcd, s, t = extended_gcd(e1, e2)

assert gcd == 1, "e1 and e2 must be relatively prime numbers"


if s < 0:
    c1_inv = pow(c1, -1, n)
    part1 = pow(c1_inv, -s, n)
else:
    part1 = pow(c1, s, n)

if t < 0:
    c2_inv = pow(c2, -1, n)
    part2 = pow(c2_inv, -t, n)
else:
    part2 = pow(c2, t, n)

m = (part1 * part2) % n

message_bytes = m.to_bytes((m.bit_length() + 7) // 8, 'big')
message = message_bytes.decode('utf-8', errors='ignore')
print("Decrypted:", message)