from math import gcd
from functools import reduce

def chinese_remainder_theorem(n, a):
    sum = 0
    prod = reduce(lambda a, b: a * b, n)
    
    for n_i, a_i in zip(n, a):
        p = prod // n_i
        sum += a_i * pow(p, -1, n_i) * p
    return sum % prod

def hastad_attack(n_list, c_list, e=3):
    if len(set(c_list)) != 1:
        print("Maybe e > 3")
        return None
    
    c = c_list[0]
    residues = [c] * len(n_list)
    x = chinese_remainder_theorem(n_list, residues)
    m, exact = integer_nth_root(x, e)
    if exact:
        return m
    else:

        for i in range(-1000, 1000):
            candidate = m + i
            if all(pow(candidate, e, n) == c for n, c in zip(n_list, c_list)):
                return candidate
        return None

def integer_nth_root(x, n):
    low, high = 1, x
    while low <= high:
        mid = (low + high) // 2
        power = pow(mid, n)
        if power == x:
            return mid, True
        elif power < x:
            low = mid + 1
        else:
            high = mid - 1
    return high, False

def bytes_to_text(m):
    try:
        bytes_data = m.to_bytes((m.bit_length() + 7) // 8, 'big')
        return bytes_data.decode('utf-8')
    except:
        try:
            bytes_data = m.to_bytes((m.bit_length() + 7) // 8, 'little')
            return bytes_data.decode('utf-8')
        except:
            return None

n1 = 15636336652832751713240913550929520421357018370582572263111032310608996183831970805600419818142003282307388049358726375095133057481633907279054427529647475689220443392817467314968124054972483145476006507222365821049153666295302706153841057184564274816930049384948086008030851934960032887827523395693248823511461047042639068560489097731465263979937691813602142747696479141031747544913929234677870825236750914604525997919547614694195205552329329607449764381484594026755132348685223040262267724912519888183024321899694372863672953611066941691620596138519256963757458803732917466749052836396909485098747427231944465306199
n2 = 29201869317862073005813441561020592739656586970472178570132877479432583464356409643941325937106236914315204125035498764275068481997301975411968383380050755691790462045678513661330518734080239504542415946041232266958507141987781191222398507039071501430177494417540986524057671619618927699210099348181005838579226466579984787593659596888300141367294891365544778294683019249040674038723766190358558294652136484667375205438180010095891922375483205117830109436564600636816292935265458640329026625116142762423323540493270872157228218508443740977434805544006140630801051313048642011897378908473825853319208714746989895754943
n3 = 9090664389996514806032842662729439852189626330782486177053781455365163233665938102950127790401098959697436450931882988739286725892132801483151433838115821002564813307976107389544975904837027236787969371055657153453523533728107356340697569853600521118038353027421651995413522168545517546310989649170868279533337551906646220672457208812993456113992907885088917494002566575332114991249678745778360904673494026748705004157560933976271417664924362906551989513752489516869171844733386008559645585052074951068825724208226246272764290167484721911628665365033304952755204982107732119333034293057119293330923030442600381887309

c1 = 19852534033293405208394787299796536378616695606838857735466538328777410603173977096398055423262065973191275663617723064025627613668872625791304837036328135151075269143002996889102076563723106276964333074254181
c2 = 19852534033293405208394787299796536378616695606838857735466538328777410603173977096398055423262065973191275663617723064025627613668872625791304837036328135151075269143002996889102076563723106276964333074254181
c3 = 19852534033293405208394787299796536378616695606838857735466538328777410603173977096398055423262065973191275663617723064025627613668872625791304837036328135151075269143002996889102076563723106276964333074254181

n_list = [n1, n2, n3]
c_list = [c1, c2, c3]

for i in range(len(n_list)):
    for j in range(i + 1, len(n_list)):
        g = gcd(n_list[i], n_list[j])
        if g > 1:
            print(f"Common divisor found for n{i+1} and n{j+1}: {g}")

print("\nAttempting Hastad's attack (assuming e=3):")
message = hastad_attack(n_list, c_list, e=3)

if message:
    print(f"Decrypted message (number): {message}")
    
    text = bytes_to_text(message)
    if text:
        print(f"Decrypted message (text): {text}")
    else:
        print("Could not convert to text, outputting bytes:")
        bytes_data = message.to_bytes((message.bit_length() + 7) // 8, 'big')
        print(bytes_data)
        
else:
    print("Hastad's attack failed, trying other methods...")
    
    print("\nTrying with e=65537 (checking for small message):")
    for e in [65537, 17, 5, 3]:
        print(f"Checking e={e}:")
        for c in set(c_list):
            m, exact = integer_nth_root(c, e)
            if exact:
                print(f"Root found for e={e}: {m}")
                text = bytes_to_text(m)
                if text:
                    print(f"Text: {text}")
                break